Several approaches can address this issue, depending on the desired outcome:

**Option 1: Remove `!important`**

The cleanest solution is to avoid using `!important` altogether.  Re-evaluate the CSS rules to determine why such high specificity is needed.  This often points to underlying issues in the CSS structure:

```css
.container {
  color: blue;
}

.container p {
  color: red; /* Removed !important */
}

p {
  color: green;
}
```

**Option 2: Increase Specificity of the Parent Rule**

If you absolutely require the `!important` flag in the child selector, increase the specificity of the parent rule to outweigh the effect of the nested selector:

```css
.container {
  color: blue !important; /* Added !important */
}

.container p {
  color: red !important;
}

p {
  color: green;
}
```

**Option 3: Use a More Specific Selector**

Make the selector for the parent `p` element more specific.  This will ensure that it has higher specificity than the nested rule.

```css
.container {
  color: blue;
}

.container p {
  color: red !important;
}

.container p {
  color: green; /* Added specificity to make it more specific than .container p */
}
```

Choosing the best solution depends on the overall CSS architecture and desired behavior.  In most cases, removing `!important` is preferable for maintainability and predictability.